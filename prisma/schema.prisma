datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               Int       @id @default(autoincrement())
  fullname         String?   // Optional, only for candidates
  birthOfDate      DateTime? // Optional, only for candidates
  address          String?   // Optional, only for candidates
  job              String?   // Optional, only for candidates
  jobExperiences    Json?     // Optional, only for candidates
  cv               String?   // Optional, only for candidates
  instagram        String?   // Optional, only for candidates
  twitter          String?   // Optional, only for candidates
  linkedin         String?   // Optional, only for candidates
  portfolio        String?   // Optional, only for candidates
  photoProfile     String?   // Optional, only for candidates
  phoneNumber      String?   // Optional, only for candidates
  email            String     @unique // Unique email for all users
  password         String
  role             Role       // e.g., "CANDIDATE" or "EMPLOYER"
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  // New Fields
  yearOfExperience Int?      // Optional, for both candidates and employers
  gender           String?    // Optional, for candidates
  companyName      String?    // Optional, only for employers
  summary          String?    // Optional, for both candidates and employers

  // Relasi baru
  vacancies        Vacancy[]  @relation("EmployerVacancies") // Relasi ke Vacancy
 applicants       Applicant[] // New relation field to Applicant


   // SoftSkills and HardSkills stored as JSON arrays of IDs
  softSkills       Json?      // Array of SoftSkill IDs stored in JSON format
  hardSkills       Json?      // Array of HardSkill IDs stored in JSON format

  // Relasi dengan EducationLevel
  educationLevel   EducationLevel? @relation(fields: [educationLevelId], references: [id])
  educationLevelId Int?
}


enum Role {
  EMPLOYER
  CANDIDATE
}

model Vacancy {
    id                  Int              @id @default(autoincrement())
  vacancyName         String
  jobPosition         String
  jobLevel            JobLevel         @relation(fields: [jobLevelId], references: [id])
  jobLevelId          Int
  employmentStatus    EmploymentStatus  @relation(fields: [employmentStatusId], references: [id])
  employmentStatusId  Int
  vacancyStatus       String            // Status lowongan disimpan sebagai string
  responsibilities    String
  gender              Gender?
  minAge             Int?
  maxAge             Int?
  minYearExperience   Int?
  minEducationLevel   EducationLevel?   @relation(fields: [minEducationLevelId], references: [id])
  minEducationLevelId Int
  employerId          Int              
  employer            User              @relation(fields: [employerId], references: [id], name: "EmployerVacancies") // Relasi ke User
 softSkills           Json?           // Menyimpan array ID SoftSkill dalam JSON
  hardSkills           Json?           // Menyimpan array ID HardSkill dalam JSON
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  applicants          Applicant[] // New relation field to Applicant

}

model JobLevel {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  vacancies   Vacancy[]
}

model EmploymentStatus {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  vacancies   Vacancy[]
}

model EducationLevel {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  vacancies   Vacancy[]
   // Relasi one-to-many ke User
  users     User[]
}

model SoftSkill {
  id            Int        @id @default(autoincrement())
  name          String
 
}

model HardSkill {
  id            Int        @id @default(autoincrement())
  name          String

}

enum Gender {
  male
  female
  other
}

model Applicant {
  id         Int      @id @default(autoincrement())
  userId     Int      // Foreign key for the candidate applying
  vacancyId  Int      // Foreign key for the applied vacancy
  status     Status   // Enum to show the current status of the applicant
  flow       Flow     // Enum to track the application stage (screening, interview, etc.)
  note       String?  // Optional notes for additional information
  createdAt  DateTime @default(now())
  updatedAt          DateTime         @updatedAt
// Relations
  user               User      @relation(fields: [userId], references: [id])
  vacancy            Vacancy   @relation(fields: [vacancyId], references: [id])

  @@unique([userId, vacancyId]) // Ensures a user can only apply once per vacancy
}

enum Status {
  APPLIED        // Initial application status
  IN_PROGRESS    // Application is actively being processed
  ACCEPTED       // Applicant accepted for the role
  REJECTED       // Applicant rejected
  WITHDRAWN      // Applicant withdrew their application
}

enum Flow {
  SCREENING      // Initial screening stage
  INTERVIEW      // Interview stage
  OFFER          // Offer stage
  ONBOARDING     // Final onboarding stage
}

